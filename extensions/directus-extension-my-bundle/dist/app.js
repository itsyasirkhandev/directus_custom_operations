const e=[],t=[],a=[],n=[],i=[],o=[],l=[{id:"operation-store-value",name:"Store Value",icon:"inventory_2",description:"Stores a value of a specific type (string, object, array, etc.) and returns it directly.",overview:({value_type:e,value_input:t})=>{let a=String(t)||"Not configured";return a.length>30&&(a=a.substring(0,30)+"..."),[{label:"Type",text:e},{label:"Stored Value",text:a}]},options:[{field:"value_type",name:"Data Type",type:"string",meta:{width:"half",interface:"select-dropdown",options:{choices:[{text:"String",value:"string"},{text:"Number",value:"number"},{text:"Boolean",value:"boolean"},{text:"JSON (Object or Array)",value:"json"}]}},schema:{default_value:"string"}},{field:"value_input",name:"Value",type:"text",meta:{width:"full",interface:"input-multiline",options:{placeholder:"Enter the value to store..."}},notes:'For String, type directly. For Number, enter digits. For Boolean, type "true" or "false". For JSON, paste valid JSON.'}]},{id:"generate-random-number",name:"Generate Random Number",icon:"casino",description:"Generates a random number within a specified range and returns it directly.",overview:({min_value:e,max_value:t,integer_only:a})=>[{label:"Range",text:`${void 0===e?0:e} – ${void 0===t?100:t}`},{label:"Type",text:a?"Integer":"Float (Decimal)"},{label:"Output",text:"Returns number directly"}],options:[{field:"min_value",name:"Minimum Value",type:"number",meta:{interface:"input",width:"half",options:{placeholder:"e.g., 0"}},schema:{default_value:0}},{field:"max_value",name:"Maximum Value",type:"number",meta:{interface:"input",width:"half",options:{placeholder:"e.g., 100"}},schema:{default_value:100}},{field:"integer_only",name:"Integer Only",type:"boolean",meta:{interface:"boolean",width:"full",note:"If enabled, generates a whole number. Otherwise, a decimal number."},schema:{default_value:!0}}]},{id:"operation-simple-condition",name:"Simple Condition",icon:"rule",description:"Compares two values and halts the flow if the condition is false.",overview:({value1:e,operator:t,value2:a})=>[{label:"Condition",text:`${e||"Value 1"} ${t||"??"} ${a||""}`}],options:[{field:"value1",name:"Value 1 / Object",type:"string",meta:{width:"full",interface:"input",options:{placeholder:"e.g., {{$trigger.body.user_otp}} or {{$trigger.body}}"}},notes:'For "Exists" checks, this should be the object to inspect.'},{field:"operator",name:"Operator",type:"string",meta:{width:"full",interface:"select-dropdown",options:{choices:[{text:"Equals",value:"_eq"},{text:"Not Equals",value:"_neq"},{text:"Exists",value:"_exists"},{text:"Does Not Exist",value:"_does_not_exist"},{text:"Greater Than",value:"_gt"},{text:"Greater Than or Equal",value:"_gte"},{text:"Less Than",value:"_lt"},{text:"Less Than or Equal",value:"_lte"},{text:"Contains (case-insensitive)",value:"_icontains"},{text:"Is Null",value:"_null"},{text:"Is Not Null",value:"_nnull"},{text:"Is Empty",value:"_empty"},{text:"Is Not Empty",value:"_nempty"}]}},schema:{default_value:"_eq"}},{field:"value2",name:"Value 2 / Property Path",type:"string",meta:{width:"full",interface:"input",options:{placeholder:"e.g., {{$last.backend_otp}} or user.address.city"},conditions:[{rule:{operator:{_nin:["_null","_nnull","_empty","_nempty"]}},hidden:!1},{rule:{operator:{_in:["_null","nnull","_empty","_nempty"]}},hidden:!0}]},notes:'For "Exists" checks, this should be the dot-notation path to the property.'}]},{id:"validate-data-types",name:"Validate Query Parameter",icon:"checklist_rtl",description:"Validates properties in an object against required data types. Halts flow on failure.",overview:({required_rules:e})=>[{label:"Validation Rules",text:e?`${e.length} defined`:"Not configured"}],options:[{field:"input_object",name:"Input Object to Validate",type:"json",meta:{interface:"input-code",options:{language:"json",placeholder:"e.g., {{$trigger.body}}"},width:"full",note:"The JSON object whose properties you want to validate."}},{field:"required_rules",name:"Validation Rules",type:"json",meta:{interface:"list",width:"full",options:{add_button_text:"Add Rule",fields:[{field:"key",name:"Property Key",type:"string",meta:{interface:"input",width:"full",options:{placeholder:"e.g., user.id or status"}}},{field:"type",name:"Required Type",type:"string",meta:{interface:"select-dropdown",width:"half",options:{choices:[{text:"Text (String)",value:"string"},{text:"Email",value:"email"},{text:"Number (Integer or Decimal)",value:"number"},{text:"Boolean (true/false)",value:"boolean"},{text:"Array",value:"array"},{text:"Object",value:"object"},{text:"Timestamp",value:"timestamp"},{text:"Is Null",value:"null"}]}},schema:{default_value:"string"}},{field:"allow_empty",name:"Allow Empty / Null",type:"boolean",meta:{interface:"boolean",width:"half",note:"If true, an empty string or null value will pass validation."},schema:{default_value:!1}}]}}},{field:"custom_error_prefix",name:"Custom Error Message Prefix (Optional)",type:"string",meta:{interface:"input",options:{placeholder:"e.g., Input Validation Failed:"},width:"full"}}]},{id:"external-api-request-simple",name:"Advanced API Request",icon:"http",description:"Sends an HTTP request with advanced auth and response handling.",overview:({method:e,url:t,authMethod:a,responseBodyType:n})=>[{label:"Method",text:e||"Not Set"},{label:"URL",text:t||"Not Set"},{label:"Auth",text:a||"None"},{label:"Response",text:n||"Auto"}],options:[{field:"method",name:"HTTP Method",type:"string",meta:{interface:"select-dropdown",options:{choices:[{text:"GET",value:"GET"},{text:"POST",value:"POST"},{text:"PUT",value:"PUT"},{text:"PATCH",value:"PATCH"},{text:"DELETE",value:"DELETE"}]},width:"half"},schema:{default_value:"GET"}},{field:"url",name:"Request URL",type:"string",meta:{interface:"input",options:{placeholder:"https://api.example.com/data"},width:"half",required:!0}},{field:"authMethod",name:"Authentication",type:"string",meta:{interface:"select-dropdown",options:{choices:[{text:"None",value:"none"},{text:"Bearer Token",value:"bearer"},{text:"Basic Auth",value:"basic"},{text:"Custom Headers",value:"custom"}]},width:"full"},schema:{default_value:"none"}},{field:"bearerToken",name:"Bearer Token",type:"string",meta:{interface:"input",options:{placeholder:"Enter your API key or token",masked:!0},width:"full",conditions:[{rule:{authMethod:{_eq:"bearer"}},hidden:!1},{rule:{authMethod:{_neq:"bearer"}},hidden:!0}]}},{field:"basicAuthUsername",name:"Username",type:"string",meta:{interface:"input",width:"half",conditions:[{rule:{authMethod:{_eq:"basic"}},hidden:!1},{rule:{authMethod:{_neq:"basic"}},hidden:!0}]}},{field:"basicAuthPassword",name:"Password",type:"string",meta:{interface:"input",options:{masked:!0},width:"half",conditions:[{rule:{authMethod:{_eq:"basic"}},hidden:!1},{rule:{authMethod:{_neq:"basic"}},hidden:!0}]}},{field:"headers",name:"Custom Headers",type:"json",meta:{interface:"list",options:{fields:[{field:"key",name:"Header Name",type:"string",meta:{interface:"input",width:"half"}},{field:"value",name:"Header Value",type:"string",meta:{interface:"input",width:"half"}}]},width:"full",conditions:[{rule:{authMethod:{_eq:"custom"}},hidden:!1},{rule:{authMethod:{_neq:"custom"}},hidden:!0}]}},{field:"queryParams",name:"Query Parameters",type:"json",meta:{interface:"list",options:{fields:[{field:"key",name:"Param Name",type:"string",meta:{interface:"input",width:"half"}},{field:"value",name:"Param Value",type:"string",meta:{interface:"input",width:"half"}}]},width:"full"}},{field:"bodyJson",name:"JSON Body",type:"json",meta:{interface:"input-code",options:{language:"json"},width:"full",conditions:[{rule:{method:{_in:["POST","PUT","PATCH"]}},hidden:!1},{rule:{method:{_nin:["POST","PUT","PATCH"]}},hidden:!0}]}},{field:"responseBodyType",name:"Response Body Type",type:"string",meta:{interface:"select-dropdown",options:{choices:[{text:"Auto-Detect (JSON or Text)",value:"auto"},{text:"JSON",value:"json"},{text:"Text / HTML",value:"text"}]},width:"half"},schema:{default_value:"auto"}},{field:"responseBodyPath",name:"Response Body Path (Optional)",type:"string",meta:{interface:"input",options:{placeholder:"e.g., data.user.id"},width:"half",conditions:[{rule:{responseBodyType:{_in:["auto","json"]}},hidden:!1},{rule:{responseBodyType:{_nin:["auto","json"]}},hidden:!0}],note:"Extract a specific part of the JSON response."}},{field:"requestTimeout",name:"Timeout (milliseconds)",type:"integer",meta:{interface:"input",options:{placeholder:"10000"},width:"full"},schema:{default_value:1e4}}]},{id:"operation-string-toolkit",name:"String Toolkit",icon:"text_fields",description:"Performs a variety of text manipulation operations.",overview:({operation:e,input_string:t})=>[{label:"Operation",text:e?e.replace(/_/g," "):"Not Set"},{label:"Input",text:t?`${String(t).substring(0,30)}...`:"Not Set"}],options:[{field:"operation",name:"Operation",type:"string",meta:{width:"full",interface:"select-dropdown",options:{choices:[{text:"Append Text",value:"append"},{text:"Prepend Text",value:"prepend"},{text:"Trim Whitespace",value:"trim"},{text:"Left Trim Whitespace",value:"ltrim"},{text:"Right Trim Whitespace",value:"rtrim"},{text:"Replace Text",value:"replace"},{text:"Starts With",value:"starts_with"},{text:"Ends With",value:"ends_with"},{text:"Contains",value:"contains"},{text:"Format Template",value:"format_template"}]}},schema:{default_value:"append"}},{field:"input_string",name:"Input String",type:"text",meta:{width:"full",interface:"input-multiline",options:{placeholder:"The text to manipulate..."}}},{field:"text_to_add",name:"Text to Add",type:"string",meta:{interface:"input",width:"full",options:{placeholder:"e.g., world or {{$last}}"},conditions:[{rule:{operation:{_in:["append","prepend"]}},hidden:!1},{rule:{operation:{_nin:["append","prepend"]}},hidden:!0}]}},{field:"find_text",name:"Find Text",type:"string",meta:{interface:"input",width:"half",conditions:[{rule:{operation:{_eq:"replace"}},hidden:!1},{rule:{operation:{_neq:"replace"}},hidden:!0}]}},{field:"replace_with",name:"Replace With",type:"string",meta:{interface:"input",width:"half",conditions:[{rule:{operation:{_eq:"replace"}},hidden:!1},{rule:{operation:{_neq:"replace"}},hidden:!0}]}},{field:"substring_to_check",name:"Text to Check For",type:"string",meta:{interface:"input",width:"full",conditions:[{rule:{operation:{_in:["starts_with","ends_with","contains"]}},hidden:!1},{rule:{operation:{_nin:["starts_with","ends_with","contains"]}},hidden:!0}]}},{field:"match_case",name:"Match Case",type:"boolean",meta:{interface:"boolean",width:"full",conditions:[{rule:{operation:{_in:["starts_with","ends_with","contains","replace"]}},hidden:!1},{rule:{operation:{_nin:["starts_with","ends_with","contains","replace"]}},hidden:!0}]},schema:{default_value:!1}},{field:"template_string",name:"Template String",type:"text",meta:{width:"full",interface:"input-multiline",options:{placeholder:"Hello {name}, your ID is {id}."},conditions:[{rule:{operation:{_eq:"format_template"}},hidden:!1},{rule:{operation:{_neq:"format_template"}},hidden:!0}]}},{field:"replacements",name:"Replacements",type:"json",meta:{width:"full",interface:"list",options:{add_button_text:"Add Replacement",fields:[{field:"key",name:"Placeholder Key",type:"string",meta:{interface:"input",width:"half",options:{placeholder:"name (no braces)"}}},{field:"value",name:"Replacement Value",type:"string",meta:{interface:"input",width:"half",options:{placeholder:"Jane or {{$last}}"}}}]},conditions:[{rule:{operation:{_eq:"format_template"}},hidden:!1},{rule:{operation:{_neq:"format_template"}},hidden:!0}]}}]},{id:"operation-json-parser",name:"Get Value",icon:"data_object",description:"Extracts a value from the flow data using a path.",overview:({path:e})=>[{label:"Extract Value at Path",text:e||"Not configured"}],options:[{field:"path",name:"Path in Flow Data",type:"string",meta:{width:"full",interface:"input",options:{placeholder:"e.g., trigger.body.user.name",font:"monospace"}},notes:"Provide a path to the value within the flow context (e.g., trigger.body.customer.email or last.some_id). Do not use {{...}}."},{field:"default_value",name:"Default Value",type:"string",meta:{width:"full",interface:"input",options:{placeholder:"(Optional) Value to return if path is not found"}},notes:"If the path does not exist, this value will be returned instead of an error."}]},{id:"throw-custom-error",name:"Throw Custom Error",icon:"error",description:"Halts the flow and throws a specific error with a custom message, status, and code.",overview:({message:e,status:t,code:a})=>[{label:"Status",text:t||"400"},{label:"Code",text:a||"CUSTOM_ERROR"},{label:"Message",text:e?e.length>30?e.substring(0,27)+"...":e:"No message."}],options:[{field:"message",name:"Error Message",type:"string",meta:{interface:"input",width:"full",note:"The human-readable error message.",options:{placeholder:"Invalid input provided."}}},{field:"status",name:"Error Type (HTTP Status)",type:"integer",meta:{interface:"select-dropdown",width:"half",options:{choices:[{text:"400: Bad Request",value:400},{text:"401: Unauthorized",value:401},{text:"403: Forbidden",value:403},{text:"404: Not Found",value:404},{text:"409: Conflict",value:409},{text:"500: Internal Server Error",value:500}],allowOther:!0},note:"The HTTP status code to return."},schema:{default_value:400}},{field:"code",name:"Error Code",type:"string",meta:{interface:"select-dropdown",width:"half",options:{choices:[{text:"INVALID_INPUT",value:"INVALID_INPUT"},{text:"NOT_FOUND",value:"NOT_FOUND"},{text:"FORBIDDEN",value:"FORBIDDEN"},{text:"UNAUTHENTICATED",value:"UNAUTHENTICATED"},{text:"TOKEN_EXPIRED",value:"TOKEN_EXPIRED"},{text:"INTERNAL_ERROR",value:"INTERNAL_ERROR"}],allowOther:!0},note:"A machine-readable code for this error."},schema:{default_value:"INVALID_INPUT"}}]},{id:"operation-condition-gate",name:"Condition (Gate)",icon:"rule",description:"Halts the flow if a set of grouped conditions are not met.",overview:({logic:e,condition_groups:t})=>[{label:"Top-Level Logic",text:"Combining Groups with "+("_or"===e?"OR":"AND")},{label:"Condition Groups",text:t?`${t.length} defined`:"None defined"}],options:[{field:"logic",name:"Top-Level Logic (for combining groups)",type:"string",meta:{width:"full",interface:"select-dropdown",options:{choices:[{text:"ALL groups must be true (AND)",value:"_and"},{text:"ANY group can be true (OR)",value:"_or"}]}},schema:{default_value:"_and"}},{field:"condition_groups",name:"Condition Groups",type:"json",meta:{width:"full",interface:"list",options:{add_button_text:"Add Condition Group",fields:[{field:"group_logic",name:"Group Logic",type:"string",meta:{interface:"select-dropdown",width:"full",options:{choices:[{text:"ALL conditions in this group must be true (AND)",value:"_and"},{text:"ANY condition in this group can be true (OR)",value:"_or"}]}},schema:{default_value:"_and"}},{field:"conditions",name:"Conditions",type:"json",meta:{width:"full",interface:"list",options:{add_button_text:"Add Condition",fields:[{field:"left_value",name:"Value",type:"string",meta:{interface:"input",width:"half",options:{placeholder:"{{$trigger.body.status}}"}}},{field:"operator",name:"Operator",type:"string",meta:{interface:"select-dropdown",width:"quarter",options:{choices:[{text:"Equals",value:"_eq"},{text:"Not Equals",value:"_neq"},{text:"Greater Than",value:"_gt"},{text:"Greater Than or Equal",value:"_gte"},{text:"Less Than",value:"_lt"},{text:"Less Than or Equal",value:"_lte"},{text:"Contains (case-sensitive)",value:"_contains"},{text:"Contains (case-insensitive)",value:"_icontains"},{text:"Is Null",value:"_null"},{text:"Is Not Null",value:"_nnull"},{text:"Is Empty",value:"_empty"},{text:"Is Not Empty",value:"_nempty"},{text:"Is In List (comma-separated)",value:"_in"},{text:"Is Not In List (comma-separated)",value:"_nin"},{text:"Is After Date",value:"_after"},{text:"Is Before Date",value:"_before"},{text:"Matches Regex",value:"_regex"}]}},schema:{default_value:"_eq"}},{field:"right_value",name:"Comparison Value",type:"string",meta:{interface:"input",width:"quarter",options:{placeholder:"published"}}}]}}}]}}}]},{id:"operation-has-record",name:"Has Record?",icon:"check_box",description:"Checks if a record exists in a collection based on a filter. Halts the flow if no record is found.",overview:({collection:e,filter_rules:t})=>[{label:"Collection",text:e?`collections.${e}`:"Not Set"},{label:"Filter Rules",text:t?`${t.length} defined`:"No filter"}],options:[{field:"collection",name:"$t:collection",type:"string",meta:{width:"full",interface:"system-collection",options:{include_system:!0}}},{field:"logic",name:"Logic",type:"string",meta:{width:"half",interface:"select-dropdown",options:{choices:[{text:"ALL rules must be true (AND)",value:"_and"},{text:"ANY rule can be true (OR)",value:"_or"}]}},schema:{default_value:"_and"}},{field:"filter_rules",name:"Filter Rules",type:"json",meta:{width:"full",interface:"list",options:{add_button_text:"Add Rule",fields:[{field:"field",name:"Field",type:"string",meta:{interface:"system-field-in-collection",options:{collectionField:"collection"},width:"half"}},{field:"operator",name:"Operator",type:"string",meta:{interface:"select-dropdown",width:"quarter",options:{choices:[{text:"Equals",value:"_eq"},{text:"Not Equals",value:"_neq"},{text:"Greater Than",value:"_gt"},{text:"Greater Than or Equal",value:"_gte"},{text:"Less Than",value:"_lt"},{text:"Less Than or Equal",value:"_lte"},{text:"Contains (case-sensitive)",value:"_contains"},{text:"Is Null",value:"_null"},{text:"Is Not Null",value:"_nnull"},{text:"Is In List (comma-separated)",value:"_in"},{text:"Is Not In List (comma-separated)",value:"_nin"}]}},schema:{default_value:"_eq"}},{field:"value",name:"Value",type:"string",meta:{interface:"input",width:"quarter",options:{placeholder:"Enter value"}}}]}},notes:"If a record matching the rules is found, the flow continues. If not, the flow is halted and will follow the reject path."}]},{id:"operation-filter-builder",name:"Filter Builder",icon:"filter_alt",description:"Visually build complex, nested Directus filter rules.",overview:({top_level_logic:e,condition_groups:t,output_format:a})=>[{label:"Logic",text:`Combining ${t?.length||0} groups with ${"_or"===e?"OR":"AND"}`},{label:"Output",text:"filter"===a?'Wrapped in "filter" key':"Direct Object"}],options:[{field:"output_format",name:"Output Format",type:"string",meta:{width:"full",interface:"select-dropdown",options:{choices:[{text:"Direct Filter Object (for conditions)",value:"payload"},{text:'Wrapped in "filter" key (for Read Data)',value:"filter"}]}},schema:{default_value:"payload"},notes:'Choose "Wrapped" when passing this to a Read Data operation.'},{field:"top_level_logic",name:"Top-Level Logic (for combining groups)",type:"string",meta:{width:"full",interface:"select-dropdown",options:{choices:[{text:"ANY group can be true (OR)",value:"_or"},{text:"ALL groups must be true (AND)",value:"_and"}]}},schema:{default_value:"_or"}},{field:"condition_groups",name:"Condition Groups",type:"json",meta:{width:"full",interface:"list",options:{add_button_text:"Add Condition Group",fields:[{field:"group_logic",name:"Group Logic",type:"string",meta:{interface:"select-dropdown",width:"full",options:{choices:[{text:"ALL rules in this group must be true (AND)",value:"_and"},{text:"ANY rule in this group can be true (OR)",value:"_or"}]}},schema:{default_value:"_and"}},{field:"rules",name:"Rules",type:"json",meta:{width:"full",interface:"list",options:{add_button_text:"Add Rule",fields:[{field:"field",name:"Field",type:"string",meta:{interface:"input",width:"half",options:{placeholder:"status"}}},{field:"operator",name:"Operator",type:"string",meta:{interface:"select-dropdown",width:"quarter",options:{choices:[{text:"Equals",value:"_eq"},{text:"Not Equals",value:"_neq"},{text:"Greater Than",value:"_gt"},{text:"Greater Than or Equal",value:"_gte"},{text:"Less Than",value:"_lt"},{text:"Less Than or Equal",value:"_lte"},{text:"In List",value:"_in"},{text:"Not In List",value:"_nin"},{text:"Contains",value:"_contains"},{text:"Contains (case-insensitive)",value:"_icontains"},{text:"Does Not Contain",value:"_ncontains"},{text:"Starts With",value:"_starts_with"},{text:"Does Not Start With",value:"_nstarts_with"},{text:"Ends With",value:"_ends_with"},{text:"Does Not End With",value:"_nends_with"},{text:"Is Null",value:"_null"},{text:"Is Not Null",value:"_nnull"},{text:"Is Empty",value:"_empty"},{text:"Is Not Empty",value:"_nempty"}]}},schema:{default_value:"_eq"}},{field:"value",name:"Value",type:"string",meta:{interface:"input",width:"quarter",options:{placeholder:"published,draft"}},notes:"For lists, use comma-separated values. Use Directus variables like $CURRENT_USER."}]}}}]}}}]},{id:"operation-find-replace",name:"Find and Replace",icon:"find_replace",description:"Finds and replaces text based on one or more rules.",overview:({input_string:e,rules:t})=>[{label:"Rules Defined",text:t?`${t.length}`:"0"},{label:"Input String",text:e?`${e.substring(0,30)}...`:"Not Set"}],options:[{field:"input_string",name:"Input String",type:"text",meta:{width:"full",interface:"input-multiline",options:{placeholder:"The text to perform replacements on..."}}},{field:"rules",name:"Replacement Rules",type:"json",meta:{width:"full",interface:"list",options:{add_button_text:"Add Rule",fields:[{field:"find",name:"Find Text",type:"string",meta:{interface:"input",width:"half",options:{placeholder:"text to find"}}},{field:"replace",name:"Replace With",type:"string",meta:{interface:"input",width:"half",options:{placeholder:"new text"}}},{field:"match_case",name:"Match Case",type:"boolean",meta:{interface:"boolean",width:"full"},schema:{default_value:!1},notes:'If enabled, the search will be case-sensitive (e.g., "Apple" will not match "apple").'}]}}},{field:"stop_on_first_match",name:"Stop on First Match",type:"boolean",meta:{width:"full",interface:"boolean"},schema:{default_value:!1},notes:"If enabled, the operation will stop after the first successful replacement."}]},{id:"operation-math-toolkit",name:"Math Toolkit",icon:"calculate",description:"Performs various mathematical calculations.",overview:({math_operation:e,number_a:t,simple_operator:a,number_b:n,rounding_input:i,rounding_method:o,decimal_places:l,min_max_operator:r})=>{const d=[{label:"Operation",text:e?e.replace(/_/g," "):"Not Set"}];switch(e){case"simple_calculation":d.push({label:"Calculation",text:`${t||"A"} ${a||"+"} ${n||"B"}`});break;case"rounding":d.push({label:"Input",text:String(i||"Not Set")}),d.push({label:"Method",text:`${o||"round"} ${"round"===o&&l?`to ${l} places`:""}`});break;case"sum_array":case"average_array":d.push({label:"Input",text:"Array of numbers"});break;case"min_max_array":case"min_max_inputs":d.push({label:"Find",text:`${r||"min"} value`})}return d},options:[{field:"math_operation",name:"Math Operation",type:"string",meta:{width:"full",interface:"select-dropdown",options:{choices:[{text:"Simple Calculation (A + B)",value:"simple_calculation"},{text:"Rounding",value:"rounding"},{text:"Sum of Array",value:"sum_array"},{text:"Average of Array",value:"average_array"},{text:"Get Min/Max from Array",value:"min_max_array"},{text:"Get Min/Max from Inputs",value:"min_max_inputs"}]}},schema:{default_value:"simple_calculation"}},{field:"number_a",name:"Number A",type:"string",meta:{width:"quarter",interface:"input",options:{placeholder:"e.g., 5 or {{...}}"},conditions:[{rule:{math_operation:{_eq:"simple_calculation"}},hidden:!1},{rule:{math_operation:{_neq:"simple_calculation"}},hidden:!0}]}},{field:"simple_operator",name:"Operator",type:"string",meta:{width:"half",interface:"select-dropdown",options:{choices:[{text:"Add (+)",value:"add"},{text:"Subtract (-)",value:"subtract"},{text:"Multiply (*)",value:"multiply"},{text:"Divide (/)",value:"divide"}]},conditions:[{rule:{math_operation:{_eq:"simple_calculation"}},hidden:!1},{rule:{math_operation:{_neq:"simple_calculation"}},hidden:!0}]},schema:{default_value:"add"}},{field:"number_b",name:"Number B",type:"string",meta:{width:"quarter",interface:"input",options:{placeholder:"e.g., 10 or {{...}}"},conditions:[{rule:{math_operation:{_eq:"simple_calculation"}},hidden:!1},{rule:{math_operation:{_neq:"simple_calculation"}},hidden:!0}]}},{field:"rounding_input",name:"Number to Round",type:"string",meta:{width:"full",interface:"input",options:{placeholder:"e.g., 3.14 or {{...}}"},conditions:[{rule:{math_operation:{_eq:"rounding"}},hidden:!1},{rule:{math_operation:{_neq:"rounding"}},hidden:!0}]}},{field:"rounding_method",name:"Rounding Method",type:"string",meta:{width:"half",interface:"select-dropdown",options:{choices:[{text:"Round (Standard)",value:"round"},{text:"Floor (Round Down)",value:"floor"},{text:"Ceil (Round Up)",value:"ceil"}]},conditions:[{rule:{math_operation:{_eq:"rounding"}},hidden:!1},{rule:{math_operation:{_neq:"rounding"}},hidden:!0}]},schema:{default_value:"round"}},{field:"decimal_places",name:"Decimal Places",type:"string",meta:{width:"half",interface:"input",options:{placeholder:"e.g., 2 or {{...}}"},note:"For standard rounding only. Leave empty for whole number.",conditions:[{rule:{math_operation:{_eq:"rounding"},rounding_method:{_eq:"round"}},hidden:!1},{rule:{math_operation:{_neq:"rounding"}},hidden:!0},{rule:{rounding_method:{_neq:"round"}},hidden:!0}]}},{field:"input_array",name:"Input Array",type:"json",meta:{width:"full",interface:"input-code",options:{language:"json",placeholder:"[1, 2, 3, 4, 5]"},conditions:[{rule:{math_operation:{_in:["sum_array","average_array","min_max_array"]}},hidden:!1},{rule:{math_operation:{_nin:["sum_array","average_array","min_max_array"]}},hidden:!0}]}},{field:"one_by_one_values",name:"Input Values",type:"json",meta:{width:"full",interface:"list",options:{add_button_text:"Add Number",fields:[{field:"value",name:"Number",type:"string",meta:{interface:"input",width:"full",options:{placeholder:"e.g., 25 or {{$last}}"}}}]},conditions:[{rule:{math_operation:{_eq:"min_max_inputs"}},hidden:!1},{rule:{math_operation:{_neq:"min_max_inputs"}},hidden:!0}]}},{field:"min_max_operator",name:"Find",type:"string",meta:{width:"full",interface:"select-dropdown",options:{choices:[{text:"Minimum Value",value:"min"},{text:"Maximum Value",value:"max"}]},conditions:[{rule:{math_operation:{_in:["min_max_array","min_max_inputs"]}},hidden:!1},{rule:{math_operation:{_nin:["min_max_array","min_max_inputs"]}},hidden:!0}]},schema:{default_value:"min"}}]},{id:"object-builder",name:"Object Builder",icon:"build",description:"Visually constructs a JSON object with static or dynamic key-value pairs.",overview:({properties:e})=>[{label:"Properties Defined",text:e?`${e.length}`:"0"}],options:[{field:"properties",name:"Object Properties",type:"json",meta:{width:"full",interface:"list",options:{add_button_text:"Add Property",fields:[{field:"key",name:"Key",type:"string",meta:{interface:"input",width:"full",options:{placeholder:"e.g., name or user.id"}}},{field:"source",name:"Value Source",type:"string",meta:{interface:"select-dropdown",width:"half",options:{choices:[{text:"Static Value",value:"static"},{text:"From Flow Data",value:"flow_data"}]}},schema:{default_value:"static"}},{field:"flow_data_path",name:"Flow Data Path",type:"string",meta:{interface:"input",width:"half",options:{placeholder:"e.g., trigger.body.name"},conditions:[{rule:{source:{_eq:"flow_data"}},hidden:!1},{rule:{source:{_neq:"flow_data"}},hidden:!0}]}},{field:"value_type",name:"Value Type",type:"string",meta:{interface:"select-dropdown",width:"half",options:{choices:[{text:"String",value:"string"},{text:"Number",value:"number"},{text:"Boolean",value:"boolean"},{text:"JSON (Object/Array)",value:"json"},{text:"Null",value:"null"}]},conditions:[{rule:{source:{_eq:"static"}},hidden:!1},{rule:{source:{_neq:"static"}},hidden:!0}]},schema:{default_value:"string"}},{field:"string_value",name:"Value",type:"string",meta:{interface:"input",width:"full",conditions:[{rule:{source:{_eq:"static"},value_type:{_eq:"string"}},hidden:!1},{rule:{source:{_neq:"static"}},hidden:!0},{rule:{value_type:{_neq:"string"}},hidden:!0}]}},{field:"number_value",name:"Value",type:"float",meta:{interface:"input",width:"full",conditions:[{rule:{source:{_eq:"static"},value_type:{_eq:"number"}},hidden:!1},{rule:{source:{_neq:"static"}},hidden:!0},{rule:{value_type:{_neq:"number"}},hidden:!0}]}},{field:"boolean_value",name:"Value",type:"boolean",meta:{interface:"boolean",width:"full",conditions:[{rule:{source:{_eq:"static"},value_type:{_eq:"boolean"}},hidden:!1},{rule:{source:{_neq:"static"}},hidden:!0},{rule:{value_type:{_neq:"boolean"}},hidden:!0}]},schema:{default_value:!0}},{field:"json_value",name:"Value",type:"json",meta:{interface:"input-code",width:"full",options:{language:"json",placeholder:'["a", "b"]'},conditions:[{rule:{source:{_eq:"static"},value_type:{_eq:"json"}},hidden:!1},{rule:{source:{_neq:"static"}},hidden:!0},{rule:{value_type:{_neq:"json"}},hidden:!0}]}}]}}}]},{id:"operation-get-env-variable",name:"Get Environment Variable",icon:"vpn_key",description:"Retrieves a value from the project's .env file.",overview:({variable_name:e})=>[{label:"Variable Name",text:e||"⚠️ Not Set"}],options:[{field:"variable_name",name:"Variable Name",type:"string",meta:{width:"full",interface:"input",options:{placeholder:"e.g., SECRET_API_KEY",font:"monospace"}},notes:"Enter the exact name of the variable as it appears in your .env file."}]},{id:"operation-object-toolkit",name:"Object Toolkit",icon:"data_object",description:"Performs various operations on JSON objects, like getting keys, values, or entries.",overview:({operation:e,input_object:t})=>[{label:"Operation",text:e?e.replace(/_/g," "):"Not Set"},{label:"Input",text:t?"Object Provided":"Not Set"}],options:[{field:"operation",name:"Operation",type:"string",meta:{width:"full",interface:"select-dropdown",options:{choices:[{text:"Get Keys",value:"get_keys"},{text:"Get Values",value:"get_values"},{text:"Get Entries (Key/Value Pairs)",value:"get_entries"}]}},schema:{default_value:"get_keys"}},{field:"input_object",name:"Input Object",type:"json",meta:{width:"full",interface:"input-code",options:{language:"json",placeholder:'{\n  "a": "3",\n  "b": "2",\n  "c": "1"\n}'}},notes:"Provide the JSON object to operate on."}]},{id:"operation-set-value",name:"Set Value in Object",icon:"tune",description:"Sets or replaces a value at a specified path within a JSON object or array.",overview:({path:e,value_type:t})=>[{label:"Path",text:e||"Not Set"},{label:"Value Type",text:t||"Not Set"}],options:[{field:"input_data",name:"Input Object or Array",type:"json",meta:{width:"full",interface:"input-code",options:{language:"json"}},notes:"The JSON object or array to modify."},{field:"path",name:"Path",type:"string",meta:{width:"full",interface:"input",options:{placeholder:"e.g., user.address.city or items[0].price",font:"monospace"}},notes:"Use dot notation for objects and bracket notation for arrays."},{field:"divider",meta:{width:"full",interface:"presentation-divider",options:{title:"Value to Set"}}},{field:"value_type",name:"Value Type",type:"string",meta:{interface:"select-dropdown",width:"half",options:{choices:[{text:"String",value:"string"},{text:"Number",value:"number"},{text:"Boolean",value:"boolean"},{text:"JSON (Object/Array)",value:"json"},{text:"Null",value:"null"}]}},schema:{default_value:"string"}},{field:"string_value",name:"Value",type:"string",meta:{interface:"input",width:"full",conditions:[{rule:{value_type:{_eq:"string"}},hidden:!1},{rule:{value_type:{_neq:"string"}},hidden:!0}]}},{field:"number_value",name:"Value",type:"float",meta:{interface:"input",width:"full",conditions:[{rule:{value_type:{_eq:"number"}},hidden:!1},{rule:{value_type:{_neq:"number"}},hidden:!0}]}},{field:"boolean_value",name:"Value",type:"boolean",meta:{interface:"boolean",width:"full",conditions:[{rule:{value_type:{_eq:"boolean"}},hidden:!1},{rule:{value_type:{_neq:"boolean"}},hidden:!0}]},schema:{default_value:!0}},{field:"json_value",name:"Value",type:"json",meta:{interface:"input-code",width:"full",options:{language:"json",placeholder:'["a", "b"]'},conditions:[{rule:{value_type:{_eq:"json"}},hidden:!1},{rule:{value_type:{_neq:"json"}},hidden:!0}]}}]},{id:"operation-for-each-loop",name:"For-Each Loop",icon:"sync_alt",description:"Iterates a set number of times or over an array, triggering another flow for each item.",overview:({loop_type:e,loop_count:t,item_list:a,collect_results:n})=>[{label:"Loop Type",text:e?e.replace(/_/g," "):"Not Set"},{label:"Iterations",text:"by_number"===e?t:Array.isArray(a)?`${a.length} items`:"N/A"},{label:"Collect Results",text:n?"Yes":"No"}],options:[{field:"loop_type",name:"Loop Type",type:"string",meta:{width:"full",interface:"select-dropdown",options:{choices:[{text:"By Number (Run X times)",value:"by_number"},{text:"By Input Data (Iterate over an array)",value:"by_data"}]}},schema:{default_value:"by_data"}},{field:"loop_count",name:"Number of Times to Run",type:"integer",meta:{width:"full",interface:"input",options:{placeholder:"e.g., 4"},conditions:[{rule:{loop_type:{_eq:"by_number"}},hidden:!1},{rule:{loop_type:{_neq:"by_number"}},hidden:!0}]},schema:{default_value:1}},{field:"item_list",name:"Input Array",type:"json",meta:{width:"full",interface:"input-code",options:{language:"json",placeholder:'[{"email": "a@a.com"}, {"email": "b@b.com"}]'},conditions:[{rule:{loop_type:{_eq:"by_data"}},hidden:!1},{rule:{loop_type:{_neq:"by_data"}},hidden:!0}]},notes:"Provide the array to loop over."},{field:"divider_1",meta:{width:"full",interface:"presentation-divider",options:{title:"Target Flow"}}},{field:"target_webhook",name:"Target Flow Webhook URL",type:"string",meta:{width:"full",interface:"input",options:{placeholder:"https://your-directus.app/flows/trigger/..."}}},{field:"additional_payload",name:"Additional Payload (Optional)",type:"json",meta:{width:"full",interface:"input-code",options:{language:"json",placeholder:'{"static_key": "static_value"}'}},notes:"This JSON object will be sent with every single loop iteration."},{field:"divider_2",meta:{width:"full",interface:"presentation-divider",options:{title:"Execution Options"}}},{field:"collect_results",name:"Collect & Return Results",type:"boolean",meta:{width:"full",interface:"boolean"},schema:{default_value:!1},notes:"If enabled, the loop will run serially and return an array of all results from the sub-flow."},{field:"execution_mode",name:"Execution Mode",type:"string",meta:{width:"half",interface:"select-dropdown",options:{choices:[{text:"Serial (One by one, slow & safe)",value:"serial"},{text:"Parallel (All at once, fast & risky)",value:"parallel"},{text:"Batch (Controlled groups, recommended)",value:"batch"}]},conditions:[{rule:{collect_results:{_eq:!1}},hidden:!1},{rule:{collect_results:{_neq:!1}},hidden:!0}]},schema:{default_value:"serial"}},{field:"stop_on_error",name:"Error Handling",type:"boolean",meta:{width:"half",interface:"select-dropdown",options:{choices:[{text:"Stop on First Error",value:!0},{text:"Continue on Error",value:!1}]}},schema:{default_value:!0}},{field:"batch_size",name:"Batch Size",type:"integer",meta:{width:"half",interface:"input",conditions:[{rule:{execution_mode:{_eq:"batch"},collect_results:{_eq:!1}},hidden:!1},{rule:{execution_mode:{_neq:"batch"}},hidden:!0},{rule:{collect_results:{_neq:!1}},hidden:!0}]},schema:{default_value:10}},{field:"batch_delay",name:"Delay Between Batches (ms)",type:"integer",meta:{width:"half",interface:"input",conditions:[{rule:{execution_mode:{_eq:"batch"},collect_results:{_eq:!1}},hidden:!1},{rule:{execution_mode:{_neq:"batch"}},hidden:!0},{rule:{collect_results:{_neq:!1}},hidden:!0}]},schema:{default_value:1e3}}]},{id:"operation-data-converter",name:"Data Converter",icon:"transform",description:"A versatile tool to encode, decode, and convert various data types.",overview:({operation:e})=>[{label:"Operation",text:e?e.replace(/_/g," "):"Not Set"}],options:[{field:"operation",name:"Conversion Operation",type:"string",meta:{width:"full",interface:"select-dropdown",options:{choices:[{text:"Encode to Base64",value:"base64_encode"},{text:"Decode from Base64",value:"base64_decode"},{text:"Encode to URL Safe Base64",value:"base64_encode_urlsafe"},{text:"Decode from URL Safe Base64",value:"base64_decode_urlsafe"},{text:"Encode to URL Component",value:"url_encode"},{text:"Decode from URL Component",value:"url_decode"},{text:"Encode Object to JSON String",value:"json_encode"},{text:"Decode JSON String to Object",value:"json_decode"},{text:"Convert to Text (String)",value:"to_text"},{text:"Convert to Integer",value:"to_int"},{text:"Convert to Decimal (Float)",value:"to_dec"},{text:"Convert to Boolean",value:"to_bool"},{text:"Convert Number between Bases",value:"base_convert"},{text:"Create Object from Keys/Values",value:"create_object"}]}},schema:{default_value:"base64_encode"}},{field:"input_value",name:"Input Value",type:"json",meta:{width:"full",interface:"input-code",options:{language:"json",placeholder:'"Hello World"'}},notes:"The data to be converted. For strings, wrap in double quotes."},{field:"from_base",name:"From Base",type:"integer",meta:{width:"half",interface:"input",conditions:[{rule:{operation:{_eq:"base_convert"}},hidden:!1},{rule:{operation:{_neq:"base_convert"}},hidden:!0}]},schema:{default_value:10}},{field:"to_base",name:"To Base",type:"integer",meta:{width:"half",interface:"input",conditions:[{rule:{operation:{_eq:"base_convert"}},hidden:!1},{rule:{operation:{_neq:"base_convert"}},hidden:!0}]},schema:{default_value:16}},{field:"keys_array",name:"Keys (Array)",type:"json",meta:{width:"half",interface:"input-code",options:{language:"json",placeholder:'["key1", "key2"]'},conditions:[{rule:{operation:{_eq:"create_object"}},hidden:!1},{rule:{operation:{_neq:"create_object"}},hidden:!0}]}},{field:"values_array",name:"Values (Array)",type:"json",meta:{width:"half",interface:"input-code",options:{language:"json",placeholder:'["value1", "value2"]'},conditions:[{rule:{operation:{_eq:"create_object"}},hidden:!1},{rule:{operation:{_neq:"create_object"}},hidden:!0}]}}]},{id:"operation-array-toolkit",name:"Array Toolkit",icon:"data_array",description:"Performs various manipulation operations on arrays.",overview:({operation:e})=>[{label:"Operation",text:e?e.replace(/_/g," "):"Not Set"}],options:[{field:"operation",name:"Operation",type:"string",meta:{width:"full",interface:"select-dropdown",options:{choices:[{text:"Append (Add to End)",value:"append"},{text:"Prepend (Add to Start)",value:"prepend"},{text:"Join to String",value:"join"},{text:"Get First Item",value:"get_first"},{text:"Get Last Item",value:"get_last"},{text:"Pop (Remove Last Item)",value:"pop"},{text:"Remove Item at Index",value:"remove_at_index"},{text:"Create Number Range",value:"range"}]}},schema:{default_value:"append"}},{field:"input_array",name:"Input Array",type:"json",meta:{width:"full",interface:"input-code",options:{language:"json",placeholder:'["apple", "banana"]'},conditions:[{rule:{operation:{_neq:"range"}},hidden:!1},{rule:{operation:{_eq:"range"}},hidden:!0}]}},{field:"element_to_add",name:"Element to Add",type:"json",meta:{interface:"input-code",options:{language:"json",placeholder:'"cherry"'},width:"full",conditions:[{rule:{operation:{_in:["append","prepend"]}},hidden:!1},{rule:{operation:{_nin:["append","prepend"]}},hidden:!0}]},notes:"Enter the value to add. For strings, wrap in double quotes."},{field:"delimiter",name:"Delimiter",type:"string",meta:{interface:"input",width:"full",options:{placeholder:", "},conditions:[{rule:{operation:{_eq:"join"}},hidden:!1},{rule:{operation:{_neq:"join"}},hidden:!0}]}},{field:"index_to_remove",name:"Index to Remove",type:"integer",meta:{interface:"input",width:"full",options:{placeholder:"0"},conditions:[{rule:{operation:{_eq:"remove_at_index"}},hidden:!1},{rule:{operation:{_neq:"remove_at_index"}},hidden:!0}]},notes:"0 is the first item in the array."},{field:"start_number",name:"Start Number",type:"integer",meta:{interface:"input",width:"half",conditions:[{rule:{operation:{_eq:"range"}},hidden:!1},{rule:{operation:{_neq:"range"}},hidden:!0}]},schema:{default_value:1}},{field:"end_number",name:"End Number",type:"integer",meta:{interface:"input",width:"half",conditions:[{rule:{operation:{_eq:"range"}},hidden:!1},{rule:{operation:{_neq:"range"}},hidden:!0}]},schema:{default_value:10}}]},{id:"operation-generate-and-store-jwt",name:"Generate and Store User Token",icon:"key",description:"Creates a new JWT for a user, saves it to their record, and returns the new token.",overview:({user_id:e,permission:t})=>[{label:"Target User ID",text:e||"Not Set"},{label:"Permissions",text:t?t.charAt(0).toUpperCase()+t.slice(1):"Trigger"}],options:[{field:"permission",name:"Permissions",type:"string",meta:{width:"full",interface:"select-dropdown",options:{choices:[{text:"From Trigger (Current User)",value:"trigger"},{text:"Full Access (Admin)",value:"full"}]}},schema:{default_value:"trigger"}},{field:"user_id",name:"User ID",type:"string",meta:{width:"full",interface:"input",options:{placeholder:"Enter user UUID or {{$accountability.user}}"}},notes:"The ID of the user to generate the token for. Must match the current user unless using Full Access."},{field:"expires_in",name:"Expires In",type:"string",meta:{width:"full",interface:"input",options:{placeholder:"e.g., 5m, 1h, 7d"}},schema:{default_value:"1d"},notes:"Token lifespan (m=minutes, h=hours, d=days). If empty, uses the project default."}]},{id:"generate-uuid",name:"Generate UUID",icon:"fingerprint",description:"Generates a new v4 UUID and returns it as a string.",overview:()=>[{label:"Action",text:"Generates a new v4 UUID"}],options:[]},{id:"operation-send-realtime-event",name:"Send Real-time Event",icon:"podcasts",description:"Sends a real-time event (notification) to specific users without triggering an email.",overview:({recipients:e,subject:t})=>[{label:"Recipients",text:e?`${e.split(",").length} user(s)`:"Not Set"},{label:"Subject",text:t||"No Subject"}],options:[{field:"recipients",name:"Recipient User IDs",type:"string",meta:{width:"full",interface:"input",options:{placeholder:"Enter one or more User IDs, separated by commas"}},notes:"You can use dynamic values, e.g., {{$trigger.user}} or {{$last.user_id}}."},{field:"subject",name:"Subject / Event Name",type:"string",meta:{width:"full",interface:"input",options:{placeholder:"e.g., job_completed"}}},{field:"message",name:"Message / Payload",type:"text",meta:{width:"full",interface:"textarea",options:{placeholder:"Can be a simple string or a JSON string."}}},{field:"divider",meta:{width:"full",interface:"presentation-divider",options:{title:"Link to Item (Optional)"}}},{field:"collection",name:"Collection",type:"string",meta:{width:"half",interface:"system-collection"}},{field:"item",name:"Item ID",type:"string",meta:{width:"half",interface:"input"}}]},{id:"simplified-flow-trigger",name:"Simplified Flow Trigger",icon:"send_to_mobile",description:"Triggers another flow with a user-friendly UI for payloads. Can be run synchronously or asynchronously.",overview:({method:e,url:t,wait_for_response:a})=>[{label:"Method",text:e||"POST"},{label:"Mode",text:!1===a?"Asynchronous (Fire & Forget)":"Synchronous (Wait for Response)"},{label:"URL",text:t||"Not Set"}],options:[{field:"method",name:"HTTP Method",type:"string",meta:{width:"half",interface:"select-dropdown",options:{choices:[{text:"POST",value:"POST"},{text:"GET",value:"GET"}]}},schema:{default_value:"POST"}},{field:"wait_for_response",name:"Wait for Response",type:"boolean",meta:{width:"half",interface:"boolean",options:{label:"Wait for sub-flow to finish"}},schema:{default_value:!0},notes:"If off, this flow will continue immediately without waiting for the other flow to complete."},{field:"url",name:"Webhook URL",type:"string",meta:{width:"full",interface:"input",options:{placeholder:"https://your-directus.app/flows/trigger/..."},required:!0}},{field:"body_properties",name:"Body Properties",type:"json",meta:{interface:"list",width:"full",options:{add_button_text:"Add Property",fields:[{field:"key",name:"Key",type:"string",meta:{interface:"input",width:"full",options:{placeholder:"e.g., user_id"}}},{field:"value_type",name:"Value Type",type:"string",meta:{interface:"select-dropdown",width:"half",options:{choices:[{text:"String",value:"string"},{text:"Number",value:"number"},{text:"Boolean",value:"boolean"},{text:"JSON (Object/Array)",value:"json"}]}},schema:{default_value:"string"}},{field:"string_value",name:"Value",type:"string",meta:{interface:"input",width:"half",conditions:[{rule:{value_type:{_eq:"string"}},hidden:!1},{rule:{value_type:{_neq:"string"}},hidden:!0}]}},{field:"number_value",name:"Value",type:"float",meta:{interface:"input",width:"half",conditions:[{rule:{value_type:{_eq:"number"}},hidden:!1},{rule:{value_type:{_neq:"number"}},hidden:!0}]}},{field:"boolean_value",name:"Value",type:"boolean",meta:{interface:"boolean",width:"half",options:{label:" "},conditions:[{rule:{value_type:{_eq:"boolean"}},hidden:!1},{rule:{value_type:{_neq:"boolean"}},hidden:!0}]}},{field:"json_value",name:"Value",type:"json",meta:{interface:"input-code",options:{language:"json"},width:"half",conditions:[{rule:{value_type:{_eq:"json"}},hidden:!1},{rule:{value_type:{_neq:"json"}},hidden:!0}]}}]},conditions:[{rule:{method:{_eq:"POST"}},hidden:!1},{rule:{method:{_neq:"POST"}},hidden:!0}]}},{field:"query_parameters",name:"Query Parameters",type:"json",meta:{interface:"list",width:"full",options:{add_button_text:"Add Parameter",fields:[{field:"key",name:"Key",type:"string",meta:{interface:"input",width:"half",options:{placeholder:"e.g., limit"}}},{field:"value",name:"Value",type:"string",meta:{interface:"input",width:"half",options:{placeholder:"e.g., 10 or {{$last}}"}}}]},conditions:[{rule:{method:{_eq:"GET"}},hidden:!1},{rule:{method:{_neq:"GET"}},hidden:!0}]}}]},{id:"operation-try-catch",name:"Try/Catch Block",icon:"healing",description:"Executes a primary flow (Try) and triggers a fallback flow (Catch) if the first one fails.",overview:({try_flow_url:e,catch_flow_url:t})=>[{label:"Try Flow",text:e?"Configured":"Not Set"},{label:"Catch Flow",text:t?"Configured":"Not Set"}],options:[{field:"try_heading",meta:{width:"full",interface:"presentation-divider",options:{title:"Try Block"}}},{field:"try_flow_url",name:"Primary Flow Webhook URL",type:"string",meta:{width:"full",interface:"input",options:{placeholder:"https://your-directus.app/flows/trigger/...",iconRight:"play_arrow"}},notes:"The webhook URL of the flow to attempt first."},{field:"try_payload",name:"Payload to Send",type:"json",meta:{width:"full",interface:"input-code",options:{language:"json",placeholder:'{"key": "value", "data": {{$trigger.body}} }'}},notes:"The JSON data to send to your primary flow."},{field:"catch_heading",meta:{width:"full",interface:"presentation-divider",options:{title:"Catch Block"}}},{field:"catch_flow_url",name:"Fallback Flow Webhook URL",type:"string",meta:{width:"full",interface:"input",options:{placeholder:"https://your-directus.app/flows/trigger/...",iconRight:"error"}},notes:"The webhook URL of the flow to trigger if the primary flow fails."}]},{id:"data-sanitizer-transformer",name:"Data Sanitizer & Transformer",icon:"auto_fix_high",description:"Applies a series of cleaning and transformation rules to an input object.",overview:({rules:e})=>[{label:"Rules Defined",text:e?`${e.length} rule(s)`:"Not configured"}],options:[{field:"input_object",name:"Input Object",type:"json",meta:{interface:"input-code",options:{language:"json",placeholder:"e.g., {{$trigger.body}}"},width:"full",note:"The JSON object you want to clean and transform."}},{field:"rules",name:"Transformation Rules",type:"json",meta:{width:"full",interface:"list",options:{add_button_text:"Add Rule",fields:[{field:"key",name:"Property Path",type:"string",meta:{interface:"input",width:"full",options:{placeholder:"e.g., user.email or address.street"}}},{field:"transformations",name:"Transformations",type:"json",schema:{default_value:[]},meta:{interface:"select-multiple",width:"full",options:{choices:[{text:"Trim Whitespace",value:"trim"},{text:"To Lowercase",value:"to_lowercase"},{text:"To Uppercase",value:"to_uppercase"},{text:"Capitalize",value:"capitalize"},{text:"Set Default Value",value:"default_if_empty"},{text:"Convert to Number",value:"to_number"},{text:"Remove HTML Tags",value:"strip_html"}]}}},{field:"default_value",name:"Default Value",type:"string",meta:{interface:"input",width:"full",conditions:[{rule:{transformations:{_contains:"default_if_empty"}},hidden:!1},{rule:{transformations:{_ncontains:"default_if_empty"}},hidden:!0}]}}]}}}]}];export{t as displays,e as interfaces,a as layouts,n as modules,l as operations,i as panels,o as themes};
